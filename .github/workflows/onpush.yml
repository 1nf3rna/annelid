# Based on https://github.com/actions-rs/meta/blob/master/recipes/quickstart.md
#
# While our "example" application has the platform-specific code,
# for simplicity we are compiling and testing everything on the Ubuntu environment only.
# For multi-OS testing see the `cross.yml` workflow.

on: [push, pull_request]


jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Run cargo check
        run: cargo check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Run cargo test
        run: cargo test

  lints:
    name: Lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

      - name: Run cargo clippy
        run: cargo clippy -- -D warnings


  build:
    needs:
      - check
      - test
      - lints
    runs-on: '${{ matrix.os }}'
    env:
      VERSION: ${{ github.ref }}
      REPOSITORY_NAME: 'annelid'
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: annelid-x86_64.macos
            artifact-path: ./target/release/Annelid.zip
            is-osx: 1
          - os: macos-11
            target: annelid-x86_64.macos-11
            artifact-path: ./target/release/Annelid.zip
            is-osx: 1
          - os: ubuntu-latest
            target: annelid-x86_64.AppImage
            artifact-path: annelid-0.1.0-x86_64.AppImage
            is-linux: 1
          - os: windows-latest
            target: annelid-x86_64.win
            artifact-path: ./target/release/annelid.exe
            is-windows: 1
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - if: ${{ matrix.is-linux }}
        run: |
          sudo apt-get install -y wget libfuse-dev
          cargo install --force cargo-appimage
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-$(uname -m).AppImage -O appimagetool
          chmod a+x appimagetool
      - run: cargo build --release
      - run: cargo install --force cargo-strip
      - run: cargo install --force cargo-bundle
      - run: cargo strip -t release
      - if: ${{ matrix.is-osx }}
        run: |
          cargo bundle --release
          pushd target/release/bundle/osx
          zip -r Annelid.zip Annelid.app
          cp Annelid.zip ../../
          popd
      - if: ${{ matrix.is-linux }}
        run: |
          PATH=./:$PATH cargo appimage
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: ${{ matrix.artifact-path }}
  release:
    if: github.ref == 'refs/heads/development' || github.ref == 'refs/heads/master'
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        with:
          lfs: true
      - id: get_repository_name
        run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_OUTPUT
        shell: bash
      - uses: actions/download-artifact@v3
        with:
          name: annelid-x86_64.AppImage
          path: annelid-x86_64.AppImage/
      - uses: actions/download-artifact@v3
        with:
          name: annelid-x86_64.macos
          path: annelid-x86_64.macos/
      - uses: actions/download-artifact@v3
        with:
          name: annelid-x86_64.macos-11
          path: annelid-x86_64.macos-11/
      - uses: actions/download-artifact@v3
        with:
          name: annelid-x86_64.win
          path: annelid-x86_64.win/
      - id: get_commit_id
        run: echo SHORT_COMMIT_ID=$(git rev-parse --short HEAD) >> $GITHUB_OUTPUT
        shell: bash
      - id: tag_date
        run: echo TAG_NAME=$(date +'%Y-%m-%d')-${{ steps.get_commit_id.outputs.short_commit_id }} >> $GITHUB_OUTPUT
        shell: bash
      - id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_date.outputs.TAG_NAME }}
          release_name: Annelid Release ${{ steps.tag_date.outputs.TAG_NAME }}
          draft: ${{ github.ref != 'refs/heads/master' }}
          prerelease: true
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./annelid-x86_64.AppImage/annelid-0.1.0-x86_64.AppImage
          asset_name: annelid-${{ steps.tag_date.outputs.TAG_NAME }}-x86_64-linux.AppImage
          asset_content_type: application/octet-stream
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: ./annelid-x86_64.macos/Annelid.zip
          asset_name: Annelid-${{ steps.tag_date.outputs.TAG_NAME }}-x86_64-macOS.zip
          asset_content_type: application/octet-stream
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: ./annelid-x86_64.macos-11/Annelid.zip
          asset_name: Annelid-${{ steps.tag_date.outputs.TAG_NAME }}-x86_64-macOS-11.zip
          asset_content_type: application/octet-stream
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: ./annelid-x86_64.win/annelid.exe
          asset_name: annelid-${{ steps.tag_date.outputs.TAG_NAME }}-x86_64-windows.exe
          asset_content_type: application/octet-stream
